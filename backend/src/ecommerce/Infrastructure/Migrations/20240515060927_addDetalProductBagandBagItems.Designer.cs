// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ecommerce.Infrastructure.Data;

#nullable disable

namespace ecommerce.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240515060927_addDetalProductBagandBagItems")]
    partial class addDetalProductBagandBagItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ecommerce.Domain.Entities.Bag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bags");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.BagItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BagId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.HasIndex("ProductId");

                    b.ToTable("BagItems");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.DetailProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Specification")
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("DetailProducts");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Brand")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Color")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Gallery")
                        .HasColumnType("text[]");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("OffPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Poster")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<List<string>>("Size")
                        .HasColumnType("text[]");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = 0,
                            Color = new List<string> { "Black", "White" },
                            Gallery = new List<string> { "image1.jpg", "image2.jpg" },
                            Gender = 0,
                            Name = "Nike Air Zoom Pegasus 37",
                            OffPrice = 100.00m,
                            Poster = "poster.jpg",
                            Price = 120.00m,
                            Size = new List<string> { "8", "9", "10" },
                            Slug = "nike-air-zoom-pegasus-37",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Brand = 1,
                            Color = new List<string> { "Pink", "White" },
                            Gallery = new List<string> { "image3.jpg", "image4.jpg" },
                            Gender = 1,
                            Name = "Adidas Ultraboost 21",
                            OffPrice = 150.00m,
                            Poster = "poster2.jpg",
                            Price = 180.00m,
                            Size = new List<string> { "7", "8", "9" },
                            Slug = "adidas-ultraboost-21",
                            Type = 1
                        });
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<bool>("SaveAddress")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            Avatar = "avatar.jpg",
                            City = "City",
                            ContactEmail = "contact@example.com",
                            Country = "Country",
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            FullName = "John Doe",
                            LastName = "Doe",
                            Password = "password123",
                            PhoneNumber = "1234567890",
                            PostalCode = 12345,
                            Role = 0,
                            SaveAddress = true,
                            State = "State",
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            Avatar = "avatar.jpg",
                            City = "City",
                            ContactEmail = "contact@example.com",
                            Country = "Country",
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            FullName = "Jane Smith",
                            LastName = "Smith",
                            Password = "password456",
                            PhoneNumber = "0987654321",
                            PostalCode = 54321,
                            Role = 1,
                            SaveAddress = true,
                            State = "State",
                            UserName = "janesmith"
                        });
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Bag", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.BagItem", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Bag", "Bag")
                        .WithMany("Items")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecommerce.Domain.Entities.Product", "Product")
                        .WithMany("BagItem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bag");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.DetailProduct", b =>
                {
                    b.HasOne("ecommerce.Domain.Entities.Product", "Product")
                        .WithOne("DetailProduct")
                        .HasForeignKey("ecommerce.Domain.Entities.DetailProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Bag", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ecommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("BagItem");

                    b.Navigation("DetailProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
